import {
    EvolverSetsForAggregate,
    handleCreateCommand,
    handleUpdateCommand,
    handleUpsertCommand,
    CommandContext,
    CommandMetadata,
    DomainEvent,
} from '@echo/lib-domain-api';

//--------------------------------
//--------------------------------

import { <%= aggregateTypeName %> } from '@root/domain/<%=aggregateFolder%>/<%= aggregateFileName %>';


//--------------------------------
//--------------------------------


<% events.forEach(function (event) { %>
import { <%= event.evolveFunction %> } from "@root/domain/<%=aggregateFolder%>/<%=event.commandFolder%>/<%= event.evolveFilename %>";
import { <%= event.isFunctionName %> } from "@root/domain/<%=aggregateFolder%>/<%=event.commandFolder%>/<%= event.eventFileName %>";
<% }) %>

export const commandEventEvolvers: EvolverSetsForAggregate<<%= aggregateTypeName %>>[] = [
    {
        aggregateName: '<%= aggregateTypeName %>',
        createEventEvolverSets: [
            <% events.filter(e => e.eventKind === 'create').forEach(function (event) { %>
            {
                eventName: '<%= event.eventType %>',
                evolver: (event: DomainEvent<string>) => {
                    if (!<%= event.isFunctionName %>(event)) throw new Error('Invalid event for <%= event.eventType %>');
                    return <%= event.evolveFunction %>(event)
                },
            },
            <% }) %>
        ],
        updateEventEvolverSets: [
            <% events.filter(e => e.eventKind === 'update').forEach(function (event) { %>
            {
                eventName: '<%= event.eventType %>',
                evolver: (state: <%= aggregateTypeName %>, event: DomainEvent<string>) => {
                    if (!<%= event.isFunctionName %>(event)) throw new Error('Invalid event for <%= event.eventType %>');
                    return <%= event.evolveFunction %>(state, event)
                },
            },
            <% }) %>
        ],
        upsertEventEvolverSets: [
            <% events.filter(e => e.eventKind === 'upsert').forEach(function (event) { %>
            {
                eventName: '<%= event.eventType %>',
                evolver: (state: <%= aggregateTypeName %> | undefined, event: DomainEvent<string>) => {
                    if (!<%= event.isFunctionName %>(event)) throw new Error('Invalid event for <%= event.eventType %>');
                    return <%= event.evolveFunction %>(state, event)
                },
            },
            <% }) %>
        ],
    },
];


//--------------------------------
//--------------------------------


<% commands.forEach(function (command) { %>

    //--------------------------------

    import { <%= command.commandTypeName %> } from '@root/domain/<%=aggregateFolder%>/<%= command.commandFolderName %>/<%= command.commandFileName %>';
    import { <%= command.handleFunctionName %> } from '@root/domain/<%=aggregateFolder%>/<%= command.commandFolderName %>/<%= command.handleFileName %>';
    <% if (command.validator) { %>  
        import { <%= command.validator.functionName %> } from '@root/domain/<%=aggregateFolder%>/<%= command.commandFolderName %>/<%= command.validator.importName %>';
    <% } %>
    <% command.commandRules.forEach(function (rule) { %>
        import { <%=rule.functionName%> as <%=rule.uniqueFunctionName%> } from '@root/domain/<%=aggregateFolder%>/<%= command.commandFolderName %>/commandRules/<%= rule.importName %>';
    <% }) %>
    <% command.commandIndexRules.forEach(function (rule) { %>
        import { <%=rule.functionName%> as <%=rule.uniqueFunctionName%> } from '@root/domain/<%=aggregateFolder%>/<%= command.commandFolderName %>/indexRules/<%= rule.importName %>';
    <% }) %>
    <% command.commandAggregateRules.forEach(function (rule) { %>
        import { <%=rule.functionName%> as <%=rule.uniqueFunctionName%> } from '@root/domain/<%=aggregateFolder%>/<%= command.commandFolderName %>/aggregateRules/<%= rule.importName %>';
    <% }) %>    

    <% if (command.commandKind === 'create') { %>  
        export const <%= command.operationFunctionName %> = (command: <%= command.commandTypeName %>, context: CommandContext, metadata: CommandMetadata) => 
            handleCreateCommand(
                '<%= aggregateTypeName %>', 
                command, 
                <%= command.handleFunctionName %>, 
                <% if (command.validator) { %>  
                    <%= command.validator.functionName %>
                <% } else { %>  
                    undefined
                <% } %>,
                [ <%= command.commandRuleFunctionNames %> ],
                [ <%= command.commandIndexRuleFunctionNames %> ],
                context,
                metadata,
            );
    <% } %>
    <% if (command.commandKind === 'update') { %>  
        export const <%= command.operationFunctionName %> = (command: <%= command.commandTypeName %>, context: CommandContext, metadata: CommandMetadata) => 
            handleUpdateCommand(
                '<%= aggregateTypeName %>', 
                command, 
                commandEventEvolvers, 
                <%= command.handleFunctionName %>, 
                <% if (command.validator) { %>  
                    <%= command.validator.functionName %>
                <% } else { %>  
                    undefined
                <% } %>,
                [ <%= command.commandRuleFunctionNames %> ],
                [ <%= command.commandIndexRuleFunctionNames %> ],
                [ <%= command.commandAggregateRuleFunctionNames %> ],
                context,
                metadata,
            );
    <% } %>
    <% if (command.commandKind === 'upsert') { %>  
        export const <%= command.operationFunctionName %> = (command: <%= command.commandTypeName %>, context: CommandContext, metadata: CommandMetadata) => 
            handleUpsertCommand(
                '<%= aggregateTypeName %>', 
                command, 
                commandEventEvolvers, 
                <%= command.handleFunctionName %>, 
                <% if (command.validator) { %>  
                    <%= command.validator.functionName %>
                <% } else { %>  
                    undefined
                <% } %>,
                [ <%= command.commandRuleFunctionNames %> ],
                [ <%= command.commandIndexRuleFunctionNames %> ],
                [ <%= command.commandAggregateRuleFunctionNames %> ],
                context,
                metadata,
            );
    <% } %>
<% }) %>    
