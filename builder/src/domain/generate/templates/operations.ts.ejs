import { EventStream, CommandContext } from '@root/common';
import { handleCreateCommand, handleUpdateCommand } from '../../../common/handleCommand';
import { EvolverSetsForAggregate } from "../../../common/evolve";

//--------------------------------
//--------------------------------

import { <%= aggregateTypeName %> } from '../<%= aggregateFileName %>';


//--------------------------------
//--------------------------------


<% events.forEach(function (event) { %>
import { <%= event.evolveFunction %> } from "../<%= event.commandFolder %>/<%= event.evolveFilename %>";
<% }) %>

export const commandEventEvolvers: EvolverSetsForAggregate<<%= aggregateTypeName %>>[] = [
    {
        aggregateName: '<%= aggregateTypeName %>',
        createEventEvolverSets: [
            <% events.filter(e => e.eventKind === 'create').forEach(function (event) { %>
            {
                eventName: '<%= event.eventType %>',
                evolver: <%= event.evolveFunction %>,
            },
            <% }) %>
        ],
        updateEventEvolverSets: [
            <% events.filter(e => e.eventKind === 'update').forEach(function (event) { %>
            {
                eventName: '<%= event.eventType %>',
                evolver: <%= event.evolveFunction %>,
            },
            <% }) %>
        ],
    },
];


//--------------------------------
//--------------------------------


<% commands.forEach(function (command) { %>

    //--------------------------------

    import { <%= command.commandTypeName %> } from '../<%= command.commandFolderName %>/<%= command.commandFileName %>';
    import { <%= command.handleFunctionName %> } from '../<%= command.commandFolderName %>/<%= command.handleFileName %>';
    <% if (command.validator) { %>  
        import { <%= command.validator.functionName %> } from '../<%= command.commandFolderName %>/<%= command.validator.importName %>';
    <% } %>
    <% command.commandRules.forEach(function (rule) { %>
        import { <%= rule.functionName %> } from '../<%= command.commandFolderName %>/commandRules/<%= rule.importName %>';
    <% }) %>
    <% command.commandIndexRules.forEach(function (rule) { %>
        import { <%= rule.functionName %> } from '../<%= command.commandFolderName %>/indexRules/<%= rule.importName %>';
    <% }) %>
    <% command.commandAggregateRules.forEach(function (rule) { %>
        import { <%= rule.functionName %> } from '../<%= command.commandFolderName %>/aggregateRules/<%= rule.importName %>';
    <% }) %>    

    <% if (command.commandType === 'create') { %>  
        export const <%= command.operationFunctionName %> = (command: <%= command.commandTypeName %>, context: CommandContext) => handleCreateCommand(
            '<%= aggregateTypeName %>', 
            command, 
            <%= command.handleFunctionName %>, 
            <% if (command.validator) { %>  
                <%= command.validator.functionName %>
            <% } else { %>  
                undefined
            <% } %>,
            [ <%= command.commandRuleFunctionNames %> ],
            [ <%= command.commandIndexRuleFunctionNames %> ],
            context.eventStream,
            context.generateUuid
        );
    <% } %>
    <% if (command.commandType === 'update') { %>  
        export const <%= command.operationFunctionName %> = (command: <%= command.commandTypeName %>, context: CommandContext) => handleUpdateCommand(
            '<%= aggregateTypeName %>', 
            command, 
            commandEventEvolvers, 
            <%= command.handleFunctionName %>, 
            <% if (command.validator) { %>  
                <%= command.validator.functionName %>
            <% } else { %>  
                undefined
            <% } %>,
            [ <%= command.commandRuleFunctionNames %> ],
            [ <%= command.commandIndexRuleFunctionNames %> ],
            [ <%= command.commandAggregateRuleFunctionNames %> ],
            context.eventStream,
            context.generateUuid
        );
    <% } %>
<% }) %>    
